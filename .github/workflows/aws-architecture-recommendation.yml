# 워크플로우 이름 설정
name: AWS Architecture Recommendation

# 워크플로우 트리거 조건 설정
on:
  push:
    branches: [ main ]  # main 브랜치에 push 될 때
  pull_request:
    branches: [ main ]  # main 브랜치로의 pull request가 생성될 때
  workflow_dispatch:    # 수동으로 워크플로우를 실행할 수 있게 함

# 작업 정의
jobs:
  analyze_and_recommend:
    runs-on: ubuntu-latest  # 최신 Ubuntu 환경에서 실행
    steps:
    # 1. 코드 체크아웃
    - uses: actions/checkout@v2

    # 2. Python 환경 설정
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'  # 최신 Python 3 버전 사용

    # 3. 필요한 Python 패키지 설치
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install diagrams openai>=1.0.0  # diagrams와 OpenAI 최신 버전 패키지 설치

    # 4. OpenAI API를 사용하여 레포지토리 분석
    - name: Analyze repository with OpenAI
      id: repo_analysis
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}  # OpenAI API 키 설정
      run: |
        python - <<EOF
        import os
        import json
        from openai import OpenAI  # OpenAI 라이브러리 최신 버전 import
        
        # OpenAI 클라이언트 초기화
        client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        
        # 레포지토리 구조를 문자열로 반환하는 함수
        def get_repo_structure():
            structure = ""
            for root, dirs, files in os.walk("."):
                level = root.replace(".", "").count(os.sep)
                indent = " " * 4 * (level)
                structure += f"{indent}{os.path.basename(root)}/\n"
                subindent = " " * 4 * (level + 1)
                for f in files:
                    structure += f"{subindent}{f}\n"
            return structure
        
        # 레포지토리 구조 가져오기
        repo_structure = get_repo_structure()
        
        # OpenAI API에 전송할 프롬프트 구성
        prompt = f"""
        Based on the following repository structure, analyze the project and provide the following information:
        1. Project type (web, mobile, backend)
        2. Project scale (small, medium, large)
        3. Technologies used (comma-separated list)
        4. Estimated monthly budget in USD
        5. Performance requirements (comma-separated list)

        Repository structure:
        {repo_structure}

        Provide the answer in JSON format.
        """
        
        try:
            # OpenAI API 호출
            response = client.chat.completions.create(
              model="gpt-3.5-turbo",
              messages=[
                    {"role": "system", "content": "You are a helpful assistant that analyzes software projects."},
                    {"role": "user", "content": prompt}
                ]
            )
            
            # 디버깅을 위한 출력
            print("API Response:", response)
            print("Message Content:", response.choices[0].message.content)
            
            # JSON 파싱 전에 content가 비어있지 않은지 확인
            content = response.choices[0].message.content.strip()
            if not content:
                raise ValueError("Empty response from API")
            
            # API 응답을 JSON으로 파싱
            analysis = json.loads(content)
            
            # 파싱된 결과 출력
            for key, value in analysis.items():
                print(f"{key}={value}")
        except json.JSONDecodeError as e:
            # JSON 디코딩 오류 처리
            print(f"JSON Decode Error: {e}")
            print(f"Received content: {content}")
        except Exception as e:
            # 기타 예외 처리
            print(f"An error occurred: {e}")
        EOF

    # 5. OpenAI 분석 결과를 GitHub Actions 출력으로 설정
    - name: Set outputs
      id: set_outputs
      run: |
        echo "${{ steps.repo_analysis.outputs.* }}" | while IFS= read -r line; do
          key=$(echo $line | cut -d'=' -f1)
          value=$(echo $line | cut -d'=' -f2-)
          echo "$key=$value" >> $GITHUB_OUTPUT
        done

    # 6. AWS 아키텍처 추천 다이어그램 생성
    - name: Generate AWS architecture recommendation
      run: |
        python aws_architecture_recommender.py \
          --project-type ${{ steps.set_outputs.outputs.project_type }} \
          --scale ${{ steps.set_outputs.outputs.scale }} \
          --technologies ${{ steps.set_outputs.outputs.technologies }} \
          --budget ${{ steps.set_outputs.outputs.budget }} \
          --performance-requirements ${{ steps.set_outputs.outputs.performance_requirements }}

    # 7. 생성된 아키텍처 다이어그램 업로드
    - name: Upload architecture diagrams
      uses: actions/upload-artifact@v2
      with:
        name: aws-architecture-diagrams
        path: aws_architecture_*.png

    # 8. Pull Request에 코멘트 추가 (Pull Request 이벤트인 경우에만)
    - name: Comment PR
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.name,
            body: 'AWS Architecture recommendation has been generated. Please check the artifacts for the diagram.'
          })