# 워크플로우 이름 설정
name: AWS Architecture Recommendation

# 워크플로우에 대한 권한 설정
# issues와 pull-requests에 대한 쓰기 권한을 부여합니다.
permissions:
  issues: write
  pull-requests: write

# 워크플로우 트리거 조건 설정
on:
  push:
    branches: [ main ]  # main 브랜치에 push 될 때
  pull_request:
    branches: [ main ]  # main 브랜치로의 pull request가 생성될 때
  workflow_dispatch:    # 수동으로 워크플로우를 실행할 수 있게 함

# 작업 정의
jobs:
  analyze_and_recommend:
    runs-on: ubuntu-latest  # 최신 Ubuntu 환경에서 실행
    steps:
    # 1. 코드 체크아웃
    - uses: actions/checkout@v2
      # 이 단계에서 GitHub 저장소의 코드를 워크플로우 실행 환경으로 가져옵니다.

    # 2. Python 환경 설정
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'  # 최신 Python 3 버전 사용
      # Python 실행 환경을 설정합니다. 최신 버전의 Python 3를 사용합니다.

    # 3. Graphviz 설치
    - name: Install Graphviz
      run: |
        sudo apt-get update
        sudo apt-get install -y graphviz
      # Graphviz를 설치합니다. 이는 다이어그램 생성에 필요한 도구입니다.

    # 4. 필요한 Python 패키지 설치
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install diagrams openai>=1.0.0
      # pip를 최신 버전으로 업그레이드하고, 필요한 패키지(diagrams, openai)를 설치합니다.
      # openai는 최신 버전(1.0.0 이상)을 사용합니다.

    # 5. aws_architecture_recommender.py 파일 생성
    - name: Create aws_architecture_recommender.py
      run: |
        cat << EOF > aws_architecture_recommender.py
        import argparse
        from diagrams import Diagram, Edge, Cluster
        from diagrams.aws.compute import EC2, ECS, Lambda
        from diagrams.aws.database import RDS, Dynamodb
        from diagrams.aws.network import ELB, APIGateway

        def generate_architecture(project_type, scale, technologies, budget, performance_requirements):
            with Diagram("AWS Architecture", show=False):
                with Cluster("AWS Cloud"):
                    if "web" in project_type:
                        ELB("Load Balancer") >> EC2("Web Server")
                    if "mobile" in project_type or "api" in technologies:
                        APIGateway("API Gateway") >> Lambda("Functions")
                    if "microservices" in technologies:
                        ECS("Container Service")
                    if "database" in technologies:
                        if "nosql" in technologies:
                            Dynamodb("DynamoDB")
                        else:
                            RDS("Relational Database")

        def main():
            parser = argparse.ArgumentParser(description='Generate AWS architecture diagram')
            parser.add_argument('--project-type', required=True, help='Type of the project')
            parser.add_argument('--scale', required=True, help='Scale of the project')
            parser.add_argument('--technologies', required=True, help='Technologies used')
            parser.add_argument('--budget', required=True, help='Estimated budget')
            parser.add_argument('--performance-requirements', required=True, help='Performance requirements')
            
            args = parser.parse_args()
            
            generate_architecture(args.project_type, args.scale, args.technologies, args.budget, args.performance_requirements)

        if __name__ == "__main__":
            main()
        EOF
      # 이 단계에서는 aws_architecture_recommender.py 파일을 생성합니다.
      # 이 스크립트는 프로젝트 분석 결과를 바탕으로 AWS 아키텍처 다이어그램을 생성합니다.

    # 6. 파일 생성 확인
    - name: Check file existence
      run: |
        if [ -f "aws_architecture_recommender.py" ]; then
          echo "aws_architecture_recommender.py exists."
        else
          echo "aws_architecture_recommender.py does not exist."
          exit 1
        fi
      # 생성된 aws_architecture_recommender.py 파일의 존재 여부를 확인합니다.
      # 파일이 없으면 오류를 발생시키고 워크플로우를 중단합니다.

    # 7. OpenAI API를 사용하여 레포지토리 분석
    - name: Analyze repository with OpenAI
      id: repo_analysis
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        python - <<EOF
        import os
        import json
        from openai import OpenAI  # OpenAI 라이브러리 최신 버전 import

        # OpenAI 클라이언트 초기화
        client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        
        # 레포지토리 구조를 문자열로 반환하는 함수
        def get_repo_structure():
            structure = ""
            for root, dirs, files in os.walk("."):
                level = root.replace(".", "").count(os.sep)
                indent = " " * 4 * (level)
                structure += f"{indent}{os.path.basename(root)}/\n"
                subindent = " " * 4 * (level + 1)
                for f in files:
                    structure += f"{subindent}{f}\n"
            return structure
        
        # 레포지토리 구조 가져오기
        repo_structure = get_repo_structure()
        
        # OpenAI API에 전송할 프롬프트 구성
        prompt = f"""
        Based on the following repository structure, analyze the project and provide the following information:
        1. Project type (web, mobile, backend)
        2. Project scale (small, medium, large)
        3. Technologies used (comma-separated list)
        4. Estimated monthly budget in USD
        5. Performance requirements (comma-separated list)

        Repository structure:
        {repo_structure}

        Provide the answer in JSON format.
        """
        
        try:
            # OpenAI API 호출
            response = client.chat.completions.create(
              model="gpt-3.5-turbo",
              messages=[
                    {"role": "system", "content": "You are a helpful assistant that analyzes software projects."},
                    {"role": "user", "content": prompt}
                ]
            )
            
            # 디버깅을 위한 출력
            print("API Response:", response)
            print("Message Content:", response.choices[0].message.content)
            
            # JSON 파싱 전에 content가 비어있지 않은지 확인
            content = response.choices[0].message.content.strip()
            if not content:
                raise ValueError("Empty response from API")
            
            # API 응답을 JSON으로 파싱
            analysis = json.loads(content)
            
            # 파싱된 결과 출력
            for key, value in analysis.items():
                print(f"{key}={value}")
        except json.JSONDecodeError as e:
            # JSON 디코딩 오류 처리
            print(f"JSON Decode Error: {e}")
            print(f"Received content: {content}")
        except Exception as e:
            # 기타 예외 처리
            print(f"An error occurred: {e}")
        EOF
      # 이 단계에서는 OpenAI API를 사용하여 레포지토리 구조를 분석합니다.
      # 분석 결과는 프로젝트 유형, 규모, 사용 기술, 예상 예산, 성능 요구사항을 포함합니다.

    # 8. OpenAI 분석 결과를 GitHub Actions 출력으로 설정
    - name: Set outputs
      id: set_outputs
      run: |
        echo "${{ steps.repo_analysis.outputs.* }}" | while IFS= read -r line; do
          key=$(echo $line | cut -d'=' -f1)
          value=$(echo $line | cut -d'=' -f2-)
          echo "$key=$value" >> $GITHUB_OUTPUT
        done
      # OpenAI API를 통해 얻은 분석 결과를 GitHub Actions의 출력 변수로 설정합니다.
      # 이를 통해 다음 단계에서 분석 결과를 사용할 수 있습니다.

    # 9. AWS 아키텍처 추천 다이어그램 생성
    - name: Generate AWS architecture recommendation
      run: |
        python aws_architecture_recommender.py \
          --project-type "${{ steps.set_outputs.outputs.project_type }}" \
          --scale "${{ steps.set_outputs.outputs.scale }}" \
          --technologies "${{ steps.set_outputs.outputs.technologies }}" \
          --budget "${{ steps.set_outputs.outputs.budget }}" \
          --performance-requirements "${{ steps.set_outputs.outputs.performance_requirements }}"
      # 이전 단계에서 얻은 분석 결과를 바탕으로 AWS 아키텍처 추천 다이어그램을 생성합니다.
      # aws_architecture_recommender.py 스크립트를 실행하여 다이어그램을 생성합니다.

    # 10. 생성된 아키텍처 다이어그램 업로드
    - name: Upload architecture diagrams
      uses: actions/upload-artifact@v2
      with:
        name: aws-architecture-diagrams
        path: aws_architecture_*.png
      # 생성된 AWS 아키텍처 다이어그램을 아티팩트로 업로드합니다.
      # 이를 통해 워크플로우 실행 결과에서 다이어그램을 확인할 수 있습니다.

    # 11. 디버그 정보 출력
    - name: Debug info
      run: |
        echo "Repository: ${{ github.repository }}"
        echo "Event name: ${{ github.event_name }}"
        echo "PR number: ${{ github.event.pull_request.number }}"
      # 이 단계에서는 현재 실행 중인 워크플로우의 컨텍스트 정보를 출력합니다.
      # 문제 해결 시 유용한 정보를 제공합니다.

    # 12. Pull Request에 코멘트 추가 (Pull Request 이벤트인 경우에만)
    - name: Comment PR
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request' && github.event.action != 'closed'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { owner, repo } = context.repo;
          const issue_number = context.issue.number;
          
          console.log('Owner:', owner);
          console.log('Repo:', repo);
          console.log('Issue/PR number:', issue_number);
          
          try {
            await github.rest.issues.createComment({
              owner: owner,
              repo: repo,
              issue_number: issue_number,
              body: 'AWS Architecture recommendation has been generated. Please check the artifacts for the diagram.'
            });
            console.log('Comment posted successfully');
          } catch (error) {
            console.error('Error posting comment:', error);
            console.error('Error details:', JSON.stringify(error, null, 2));
          }
      # 이 단계는 Pull Request가 생성되거나 업데이트될 때만 실행됩니다.
      # GitHub API를 사용하여 Pull Request에 코멘트를 추가합니다.
      # 코멘트는 아키텍처 추천 다이어그램이 생성되었음을 알리고, 아티팩트를 확인하도록 안내합니다.
      # 오류가 발생할 경우 상세한 오류 정보를 로그에 출력합니다.